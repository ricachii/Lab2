int partition(vector<int32_t>& arr, int low, int high) {
    // Mediana de 3
    int mid = low + (high - low)/2;
    if (arr[mid] < arr[low]) swap(arr[low], arr[mid]);
    if (arr[high] < arr[low]) swap(arr[low], arr[high]);
    if (arr[mid] < arr[high]) swap(arr[mid], arr[high]);
    
    int pivot = arr[high], i = low - 1;
    for (int j = low; j < high; j++)
        if (arr[j] < pivot) swap(arr[++i], arr[j]);
    swap(arr[i+1], arr[high]);
    return i+1;
}

void quickSort(vector<int32_t>& arr, int low, int high) {
    stack<pair<int, int>> st;
    st.push({low, high});

    while (!st.empty()) {
        auto [l, h] = st.top();
        st.pop();

        if (l >= h) continue;

        // Insertion Sort para subarreglos peque침os
        if (h - l + 1 <= 20) {
            for (int i = l + 1; i <= h; i++) {
                int32_t key = arr[i];
                int j = i - 1;
                while (j >= l && arr[j] > key) {
                    arr[j + 1] = arr[j];
                    j--;
                }
                arr[j + 1] = key;
            }
            continue;
        }

        int pi = partition(arr, l, h);

        // Procesar primero la partici칩n m치s peque침a
        if (pi - l < h - pi) {
            st.push({l, pi - 1});
            st.push({pi + 1, h});
        } else {
            st.push({pi + 1, h});
            st.push({l, pi - 1});
        }
    }
}
